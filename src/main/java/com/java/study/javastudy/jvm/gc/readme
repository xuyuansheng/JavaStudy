Java Heap GC（堆内存回收）：

gc算法：
    引用计数算法:
    根搜索算法（可达性算法）

    引用计数器gc算法： 给对象添加一个引用计数器，每当有一个地方引用他时，计数器就加1 ，引用失效就减1，任何时刻任何
    * 计数器为0的对象就会被回收

    根搜索算法： 通过一系列名为”GC Roots“的对象作为起点，从这些节点向下搜索，找不到（即不可达）则表明
     * 此对象不可用，可以回收
     *
     *   ”GC Roots“ 包含以下几种：
     *      虚拟机栈（栈帧中的本地变量表）中的引用对象
     *      方法区中的类静态属性引用的对象
     *      方法区中的常量应用的对象
     *      本地方法栈中JNI（即一般说的native方法）引用的对象

   引用：jdk1.2之前，引用类型的数据中存储的值是另一块内存的起始地址，就称这块内存代表这个一个引用。
   这种引用很纯粹，只有 被引用和没有被引用两种状态
    jdk1.2之后  引用分为4中：
    强引用(Strong Reference)
    软引用(Soft Reference)
    弱引用(Weak Reference)
    虚引用(Phantom Reference)

Method Area GC（方法区回收）：
    废弃常量：系统中没有任何一个String的值是此常量的值，则此常量可以被回收，不是一定。
    无用的类：
        1.该类的所有实例被回收
        2.加载该类的ClassLoad被回收（一般为自定义类加载器）
        3.该类的java.lang.Class没有被任何地方引用，无法在任何地方通过反射访问该类的方法


